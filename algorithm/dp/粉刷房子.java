package dp;

/**
 * LeetCode 第 256 号问题：粉刷房子,非常精妙,
 * https://mp.weixin.qq.com/s?__biz=MzUyNjQxNjYyMg==&mid=2247486936&idx=1&sn=27ec53c1463384edeeee138db23c1c7d&chksm=fa0e6259cd79eb4f240786ad7c00dcd0ed39ad68fd62b72e15d6a8ee0ecbd26b6250ab3b1171&scene=21#wechat_redirect
 * 假如有一排房子，共 n 个，每个房子可以被粉刷成红色、蓝色或者绿色这三种颜色中的一种，你需要粉刷所有的房子并且使其相邻的两个房子颜色不能相同。
 * 当然，因为市场上不同颜色油漆的价格不同，所以房子粉刷成不同颜色的花费成本也是不同的。每个房子粉刷成不同颜色的花费是以一个 n x 3 的矩阵来表示的。
 * 例如，costs[0][0]表示第 0 号房子粉刷成红色的成本花费；costs[1][2]表示第 1 号房子粉刷成绿色的花费，以此类推。请你计算出粉刷完所有房子最少的花费成本。
 * 所有花费均为正整数。
 * 示例：
 * 输入: [[17,2,17],[16,16,5],[14,3,19]]  //顺序红色、蓝色或者绿色
 * 输出: 10
 * 解释: 将 0 号房子粉刷成蓝色，1 号房子粉刷成绿色，2 号房子粉刷成蓝色。
 * 最少花费: 2 + 5 + 3 = 10。
 */
public class 粉刷房子 {
    public static void main(String[] args) {
        int[][] arr={{17,2,17},{16,16,5},{14,3,19}};
        System.out.println(Fen(arr));
    }

    public static int[][] dp;

    /**
     * 问题拆解
     * <p>
     * 对于每个房子来说，都可以使用三种油漆当中的一种，如果说不需要保证相邻的房子的颜色必须不同，
     * 那么整个题目会变得非常简单，每个房子直接用最便宜的油漆刷就好了，但是加上这个限制条件，
     * 你会发现刷第 i 个房子的花费其实是和前面 i - 1 个房子的花费以及选择相关，如果说我们需要知道第 i 个房子使用第 k 种油漆的最小花费，
     * 那么你其实可以思考第 i - 1 个房子如果不用该油漆的最小花费，这个最小花费是考虑从 0 到当前位置所有的房子的。
     * 状态定义
     * <p>
     * 通过之前的问题拆解步骤，状态可以定义成 dp[i][k]，表示如果第 i 个房子选择第 k 个颜色，
     * 那么从 0 到 i 个房子的最小花费
     * 递推方程
     * <p>
     * 基于之前的状态定义，以及相邻的房子不能使用相同的油漆，那么递推方程可以表示成：
     * <p>
     * dp[i][k] = Math.min(dp[i - 1][l], ..., dp[i - 1][r]) + costs[i][k]， l != k, r != k
     * 实现
     * <p>
     * 因为我们要考虑 i - 1 的情况，但是第 0 个房子并不存在 i - 1 的情况，因此我们可以把第 0 个房子的最小花费存在状态数组中，当然你也可以多开一格 dp 状态，其实都是一样的。
     * 对于这道题目，你可能会问这不是和矩阵类动态规划类似吗？
     * 如果单从房子来考虑的确是，但是对于颜色的话，我们必须考虑考虑相邻房子的所有颜色，这就有点序列的意思在里面了。
     */
    public static int Fen(int[][] nums) {
        if (nums.length == 0 || nums[0].length == 0) {
            return 0;
        }//没有东西,直接返回0
        int n = nums.length;
        dp = new int[n][3];
        for (int i = 0; i < nums[0].length; i++) {
            dp[0][i] = nums[0][i];
        }//先初始化第一行,要理解dp数组语义
        for (int i = 1; i < n; i++) {
            dp[i][0] = Math.min(dp[i - 1][1], dp[i - 1][2]) + nums[i][0];
            dp[i][1] = Math.min(dp[i - 1][0], dp[i - 1][2]) + nums[i][1];
            dp[i][2] = Math.min(dp[i - 1][0], dp[i - 1][1]) + nums[i][2];
        }
        return Math.min(dp[n - 1][0], Math.min(dp[n - 1][2], dp[n - 1][1]));
    }


}

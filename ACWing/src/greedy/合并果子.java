package greedy;

import java.util.PriorityQueue;
import java.util.Scanner;

/**
 * 在一个果园里，达达已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。
 * 达达决定把所有的果子合成一堆。每一次合并，达达可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。
 * 可以看出，所有的果子经过n-1次合并之后，就只剩下一堆了。
 * 达达在合并果子时总共消耗的体力等于每次合并所耗体力之和。
 * 因为还要花大力气把这些果子搬回家，所以达达在合并果子时要尽可能地节省体力。
 * 假定每个果子重量都为1，并且已知果子的种类数和每种果子的数目，
 * 你的任务是设计出合并的次序方案，使达达耗费的体力最少，并输出这个最小的体力耗费值。
 * 例如有3种果子，数目依次为1，2，9。
 * 可以先将1、2堆合并，新堆数目为3，耗费体力为3。
 * 接着，将新堆与原先的第三堆合并，又得到新的堆，数目为12，耗费体力为12。
 * 所以达达总共耗费体力=3+12=15。
 * 可以证明15为最小的体力耗费值。
 * 输入格式
 * 输入包括两行，第一行是一个整数n，表示果子的种类数。
 * 第二行包含n个整数，用空格分隔，第i个整数ai是第i种果子的数目。
 * 输出格式
 * 输出包括一行，这一行只包含一个整数，也就是最小的体力耗费值。
 * 输入数据保证这个值小于2^31。
 * 数据范围
 * 1≤n≤10000,
 * 1≤ai≤20000
 * 输入样例：
 * 3
 * 1 2 9
 * 输出样例：
 * 15
 * <p>
 * 本题考查哈夫曼树，每次选择权值最小的两个节点合并为新节点，
 * 直到最后所有节点都合并为了一个节点，这样求得的带权路径和是最小的。
 * 可以使用小根堆实现，先将所有节点加入到小根堆中，
 * 然后每次取出最小的两个节点并从堆中删除，最后将取出的两个节点合并为新的结点加入到小根堆中，
 * 重复该过程直至小根堆中只剩下一个节点为止。
 * 可以推导出贪心选择性质:先合并小的,花费最小
 */
public class 合并果子 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for (int i = 0; i < n; i++) {
            q.add(sc.nextInt());
        }
        int a, b, res = 0;
        while (q.size() != 1) {
            a = q.poll();
            b = q.poll();
            res += a + b;
            q.add(a + b);
        }
        System.out.println(res);
    }

    static PriorityQueue<Integer> q = new PriorityQueue<Integer>();
}

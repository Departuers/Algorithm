package DFS.递归;

/**
 * AcWing 95. 费解的开关
 * <p>
 * 题目描述
 * 你玩过“拉灯”游戏吗？25盏灯排成一个5x5的方形。每一个灯都有一个开关，游戏者可以改变它的状态。每一步，游戏者可以改变某一个灯的状态。游戏者改变一个灯的状态会产生连锁反应：和这个灯上下左右相邻的灯也要相应地改变其状态。
 * <p>
 * 我们用数字“1”表示一盏开着的灯，用数字“0”表示关着的灯。下面这种状态
 * <p>
 * 10111
 * 01101
 * 10111
 * 10000
 * 11011
 * 在改变了最左上角的灯的状态后将变成：
 * <p>
 * 01111
 * 11101
 * 10111
 * 10000
 * 11011
 * 再改变它正中间的灯后状态将变成：
 * <p>
 * 01111
 * 11001
 * 11001
 * 10100
 * 11011
 * 给定一些游戏的初始状态，编写程序判断游戏者是否可能在6步以内使所有的灯都变亮。
 * 输入格式
 * 第一行输入正整数n，代表数据中共有n个待解决的游戏初始状态。
 * 以下若干行数据分为n组，每组数据有5行，每行5个字符。每组数据描述了一个游戏的初始状态。各组数据间用一个空行分隔。
 * 输出格式
 * 一共输出n行数据，每行有一个小于等于6的整数，它表示对于输入数据中对应的游戏状态最少需要几步才能使所有灯变亮。
 * 对于某一个游戏初始状态，若6步以内无法使所有灯变亮，则输出“-1”。
 * 数据范围
 * 0<n≤500
 * 输入样例：
 * 3
 * 00111
 * 01011
 * 10001
 * 11010
 * 11100
 * <p>
 * 11101
 * 11101
 * 11110
 * 11111
 * 11111
 * <p>
 * 01111
 * 11111
 * 11111
 * 11111
 * 11111
 * 输出样例：
 * 3
 * 2
 * -1
 */
public class 费解的开关 {
    public static void main(String[] args) {

    }

    static int[][] dirs = {{0, 0}, {0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    static char[][] g = new char[10][10];

    static void turn(int x, int y) {
        for (int i = 0; i < 5; i++) {
            int nx = x + dirs[i][0], ny = y + dirs[i][1];
            if (nx >= 0 && nx < 5 && ny >= 0 && ny < 5) {
                g[nx][ny] ^= 1;
            }
        }
    }

    static void work() {
        for (int k = 0; k < 1 << 5; k++) {
            char[][] backup = new char[10][10];
            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 10; j++) {
                    backup[i][j] = g[i][j];
                }
            }
            for (int j = 0; j < 5; j++) {

            }
        }
    }

}

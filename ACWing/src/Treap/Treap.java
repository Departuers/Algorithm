package Treap;

/**
 * 可以看做tree+heap  bst+heap
 * 平衡树,有红黑树,AVL splay sbt splay最多
 * 相较于其他比较简单
 * BST:Binary Search Tree
 * BST性质
 * 每一个节点都有一个权值,
 * 1.当前节点的左子树中任何一个点的权值都是严格小于当前节点的权值
 * 2.当前节点的右子树中任何一个点的权值都是严格大于当前节点的权值
 * 一般BST没有相同权值,或者在bst上弄一个计数器
 * heap 堆 一个递归定义的数据结构
 * BST中序遍历,按照左根右的顺序,结果是从小到大有序的
 * 本质:可以动态维护一个有序序列,一种数据结构
 * 1.插入操作
 * 2.删除
 * 3.找前驱后继,前驱是中序遍历的前一个结果,最小值不存在前驱,最大值不存在后继 //输入一个节点,该值一定存在
 * 4.找最大最小,最大值一直往右走,最小值,一直往左走
 * 5.求每个值的排名,
 * 6.求排名是k的数是啥
 * <p>
 * 7.比某个数小的最大值  ,该值可能不存在
 * 8.比某个数大的最小值
 * <p>
 * 随机BST高度为logn  然而很容易被卡,要旋转
 * 翻转过后,中序遍历序列不变
 * Node{
 *     int l,int r
 *     int key(BST排序关键字)
 *     ,value(堆的优先级)
 * }
 * 通知满足大根堆
 *
 */
public class Treap {
    public static void main(String[] args) {

    }
}
